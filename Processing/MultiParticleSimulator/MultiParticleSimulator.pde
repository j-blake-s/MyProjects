float count = 0;
String mode = "DYNAMIC";
String system_mode = "1";


Particle_System model = new Particle_System();
Particle_System model2 = new Particle_System();


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void setup(){
  fullScreen();
  background(0);
  frameRate(80);
}

void draw(){
  noStroke();
  fill(0,0,0,90);
  //background(0);
  //fill(0);
  rect(0,0,width,height);
  translate(width/2,height/2);
  stroke(0);
  fill(255);
  model.mathDynamic();
  model.mathStatic();
  model.model();
  count += 1;
  

  
  
  
  
}

void mouseClicked(){
  pushMatrix();
    //if (system_mode.equals("1")){
      if (mode.equals("NONE")){
      
      }
    
      else if(mode.equals("DYNAMIC")){
        model.add(new Particle(30,20,100,mouseX - width/2,mouseY - height/2,0,0));
    
      }
      else if(mode.equals("FIXED")){
        model.addF(new Particle(100,20,100,mouseX - width/2,mouseY - height/2,0,0));
    
    
    }
  //  }
  /*else if (system_mode.equals("2")){
  
    if (mode.equals("NONE")){
      
      }
    
      else if(mode.equals("DYNAMIC")){
        model2.add(new Particle(50,20,100,mouseX - width/2,mouseY - height/2,0,0));
    
      }
      else if(mode.equals("FIXED")){
        model2.addF(new Particle(200,20,100,mouseX - width/2,mouseY - height/2,0,0));
    
    
    }
  
  }
  */
  
  popMatrix();

}

void keyPressed(){
  if ( key == 'f' || key == 'F'){
  
      mode = "FIXED";
      
  
  }
  
  else if (key == 'd' || key == 'D'){
  
    mode = "DYNAMIC";
  }
  
  else if (key == 'c' || key == 'C'){
    if(system_mode.equals("1")){
      model = new Particle_System();
    }
    else{
      model2 = new Particle_System();
    }
  }
  
  else if (keyCode == 49){
      system_mode = "1";
  }
  else if (keyCode == 50){
      system_mode = "2";
  
  }
  
  else if (keyCode >= 97 && keyCode <= 102){
        int rate = keyCode - 96; //Allows user to change frameRate manually
        frameRate(rate * 10);
  }
  
  
  
}
void border(float buffer){
  noStroke();
  fill(165,85,100);
  rect(0,0,width,buffer);//Top Border
  rect(0,0,buffer,height);//Left Border
  rect(width-buffer,0,buffer,height);//Right Border
  rect(0,height-buffer,width,buffer);
  
  
  
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Particle_System{
  
  ArrayList<Particle> particles = new ArrayList();
  ArrayList<Particle> fixed = new ArrayList();
 
  
 Particle_System(){
 
 
 
 } 
 
 
 
 void add(Particle particle){
   particles.add(particle);
 
 
 
 }
 void addF(Particle particle){
   fixed.add(particle);
 }
 
 
 void mathDynamic(){
   for(int index = 0; index < particles.size(); index++){
     for(int i = 0; i < particles.size();i++){
       if (index != i){
          particles.get(index).math(particles.get(i), 3);//This might not update the particles
         
       }
     }
   }
 }
 
 void mathStatic(){
   for(int index = 0; index < particles.size();index++){
     for(int i = 0; i < fixed.size();i++){
         particles.get(index).math(fixed.get(i), 5);
     }
   
   }
 
 }
void model(){
  for(int index = 0;index < fixed.size();index++){
    fill(255);
    Particle temp = fixed.get(index);
    ellipse(temp.location.x,temp.location.y,temp.diameter,temp.diameter);
  }
  for(int index = 0; index < particles.size();index++){
    particles.get(index).fix();
    particles.get(index).location.add(particles.get(index).vel);//Does this update the particle
    Particle p = particles.get(index);
    
    if (index % 2 == 0)
        fill( ((count * (index * 2)) % 155) + 100, (count * (index + 1))  % 100,(count * (index + 1))  % 100);
    else if (index % 3 == 1)
      fill( ((count * (index + 1))  % 100), ((count * (index + 4)) % 155) + 100,(count * (index + 1))  % 100);
    else 
      fill( (count * (index + 1))  % 100 ,   (count * (index + 1))  % 100     ,((count * (index * 2)) % 155) + 100);

    if (p.vel.mag() > -1)
      ellipse(p.location.x,p.location.y,p.diameter,p.diameter);
  }
    
  textSize(15);
  noStroke();
  fill(255);
  stroke(255);
  textAlign(CORNER);
  text("Mode: " + mode, width/2 - 575, -height/2 + 20);
  textAlign(CENTER);
  text("Number of Fixed Particles: " + (fixed.size()), width/2 - 350,-height/2 + 20);
  text("Number of Dynamic Particles: " + (particles.size()), width/2 - 125,-height/2 + 20);

 }
  
  
  
  
  
  
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Particle{
  float mass;
  float diameter;
  PVector location;
  PVector vel;
  PVector acc;
  float theta;
  float G = -40;
  float reduc = .7;
  Particle(float m,float dia,float g,float x, float y,float vX,float vY){
    mass = m;
    G = g;
    diameter = dia;
    location = new PVector(x,y);
    vel = new PVector(vX,vY);
    acc = new PVector(0,0);
    
  }
  void math(Particle center, int maxVal){

    
    
    pushMatrix();
    translate(center.location.x,center.location.y);
    PVector temp = new PVector(location.x - center.location.x ,location.y - center.location.y);

    if (temp.x > 0 && location.y > 0){ //Quad 1
      theta = atan(temp.y/temp.x);
      float x = (center.G * -center.mass / sq(temp.mag()) * cos(theta));
      float y = (center.G * -center.mass / sq(temp.mag())) * sin(theta);
      x = max(min(x,maxVal),-maxVal);
      y = max(min(y,maxVal),-maxVal);
      acc.add(x,y); //Right Here
      vel.add(acc);

  
    }
    else if (temp.x > 0 && temp.y < 0){ // Quad 4
      theta =  atan(temp.x/temp.y) + (3 * PI/2);
      float x = (center.G * center.mass / sq(temp.mag()) * cos(theta));
      float y = (center.G * -center.mass / sq(temp.mag())) * sin(theta);
      x = max(min(x,maxVal),-maxVal);
      y = max(min(y,maxVal),-maxVal);
      acc.add(x, y); //Right Here
      vel.add(acc);

    }
    else if (temp.x < 0 && temp.y > 0){ // Quad 2
      theta = atan(-temp.x/temp.y)+ PI/2; 
      float x = (center.G * -center.mass / sq(temp.mag()) * cos(theta));
      float y = (center.G * -center.mass / sq(temp.mag())) * sin(theta);
      x = max(min(x,maxVal),-maxVal);
      y = max(min(y,maxVal),-maxVal);
      acc.add(x, y); //Right Here
      vel.add(acc);
      
    }
    else if (temp.x < 0 && temp.y < 0){ // Quad 3
      theta = atan(temp.y/temp.x) + PI; 
      float x = (center.G * -center.mass / sq(temp.mag()) * cos(theta));
      float y = (center.G * -center.mass / sq(temp.mag())) * sin(theta);
      x = max(min(x,maxVal),-maxVal);
      y = max(min(y,maxVal),-maxVal);
      acc.add(x,y); //Right Here
      vel.add(acc);
    }
     popMatrix();
     

  } 
  
  
  void fix(){
     if (location.y < -height/2 + diameter/2 ){
         vel.y = abs(vel.y) * reduc;
     }
     if (location.y > height/2 - diameter/2 ){
         vel.y = -abs(vel.y) * reduc;
     }
     if (location.x < -width/2 + diameter/2){
       vel.x = abs(vel.x) * reduc;
       
     } 
     if (location.x > width/2 - diameter/2){
         vel.x = -abs(vel.x) * reduc;
     
     }
           
     pushMatrix();
     
     translate(location.x,location.y);
     stroke(255);
     //line(0,0,acc.x * 1000,acc.y * 1000);
     stroke(200,100,0);
     //line(0,0,vel.x * 10,vel.y*10);
     noStroke();
     acc.set(0,0);
     popMatrix();
  }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
